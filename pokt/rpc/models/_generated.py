# generated by datamodel-codegen:
#   filename:  rpc-spec.yaml
#   timestamp: 2022-02-07T21:53:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field


class Attribute(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class ABCIEvent(BaseModel):
    type_: Optional[str] = Field(None, alias="type")
    attributes: Optional[List[Attribute]] = None


class ABCIMessageLog(BaseModel):
    msg_index: Optional[int] = Field(
        None, description="Ordered index of the log message"
    )
    success: Optional[bool] = Field(None, description="Success or failure?")
    log: Optional[str] = Field(None, description="Full text of the log")
    events: Optional[List[ABCIEvent]] = None


class Coin(BaseModel):
    amount: Optional[str] = None
    denom: Optional[str] = None


class Application(BaseModel):
    address: Optional[str] = Field(
        None, description="The hex address of the application"
    )
    public_key: Optional[str] = Field(
        None, description="The hex public key of the application"
    )
    jailed: Optional[bool] = Field(
        False, description="Has the application been jailed from staked status"
    )
    status: Optional[int] = Field(None, description="Application status")
    chains: Optional[List[str]] = Field(None, description="Blockchains supported")
    tokens: Optional[str] = Field(
        None, description="How many tokens has this node staked in uPOKT"
    )
    max_relays: Optional[int] = Field(
        None, description="Maximum number of relays supported"
    )
    unstaking_time: Optional[str] = Field(
        None,
        description="If unstaking, the minimum time for the validator to complete unstaking",
    )


class ApplicationParams(BaseModel):
    unstaking_time: Optional[str] = Field(None, description="duration of unstaking")
    max_applications: Optional[int] = Field(
        None, description="maximum number of applications"
    )
    app_stake_minimum: Optional[int] = Field(
        None, description="minimum amount needed to stake as an application"
    )
    base_relays_per_pokt: Optional[int] = Field(
        None, description="base relays per POKT coin staked"
    )
    stability_adjustment: Optional[int] = Field(
        None, description="the stability adjustment from the governance"
    )
    participation_rate_on: Optional[bool] = Field(
        None,
        description="the participation rate affects the amount minted based on staked ratio",
    )


class Applications(BaseModel):
    __root__: List[Application]


class Blockchain(BaseModel):
    name: Optional[str] = Field(None, description="Name of the blockchain")
    net_id: Optional[str] = Field(None, description="Network identifier")


class Consensus(BaseModel):
    block: Optional[int] = None
    app: Optional[int] = None


class Node(BaseModel):
    address: Optional[str] = Field(None, description="The hex address of the validator")
    chains: Optional[List[str]] = Field(None, description="Blockchains supported")
    jailed: Optional[bool] = Field(
        False, description="Has the validator been jailed from staked status"
    )
    public_key: Optional[str] = Field(None, description="The validator public hex key")
    service_url: Optional[str] = Field(None, description="The validator service url")
    status: Optional[int] = Field(None, description="Validator status")
    tokens: Optional[str] = Field(
        None, description="How many tokens has this node staked in uPOKT"
    )
    unstaking_time: Optional[str] = Field(
        None,
        description="If unstaking, the minimum time for the validator to complete unstaking",
    )


class SingleParam(BaseModel):
    param_key: Optional[str] = None
    param_value: Optional[str] = None


class NodeParams(BaseModel):
    unstaking_time: Optional[datetime] = Field(
        None,
        description="How much time must pass between the begin_unstaking_tx and the node transitioning to unstaked status",
    )
    max_validators: Optional[int] = Field(
        None,
        description="Maximum number of validators in the network at any given block",
    )
    stake_denom: Optional[str] = Field(
        None,
        description="The monetary denomination of the coins in the network `uPOKT`",
    )
    stake_minimum: Optional[int] = Field(
        None,
        description="Minimum amount of uPOKT needed to stake in the network as a node",
    )
    session_block_frequency: Optional[int] = Field(
        None, description="How many blocks are in a session"
    )
    dao_allocation: Optional[int] = Field(
        None, description="Award percentage of the mint for the DAO"
    )
    proposer_allocation: Optional[int] = Field(
        None, description="Award percentage of the mint for the proposer"
    )
    max_evidence_age: Optional[str] = Field(
        None,
        description="Maximum age of tendermint evidence that is still valid (currently not implemented in Cosmos or Pocket-Core)",
    )
    signed_blocks_window: Optional[int] = Field(
        None,
        description="Window of time in blocks (unit) used for signature verification -> specifically in not signing (missing) blocks",
    )
    min_signed_per_window: Optional[int] = Field(
        None, description="Minimum number of blocks the node must sign per window"
    )
    downtime_jail_duration: Optional[int] = Field(
        None,
        description="Minimum amount of time node must spend in jail after missing blocks",
    )
    slash_fraction_double_sign: Optional[int] = Field(
        None, description="The factor of which a node is slashed for a double sign"
    )
    slash_fraction_downtime: Optional[int] = Field(
        None, description="The factor of which a node is slashed for a double sign"
    )


class PartSetHeader(BaseModel):
    total: Optional[int] = None
    hash_: Optional[str] = Field(None, alias="hash")


class PocketParams(BaseModel):
    session_node_count: Optional[int] = Field(
        None, description="Number of nodes in this session"
    )
    proof_waiting_period: Optional[int] = Field(
        None, description="Proof waiting period"
    )
    supported_blockchains: Optional[List[str]] = Field(
        None, description="Supported blockchains"
    )
    claim_expiration: Optional[int] = Field(None, description="Claim expiration")


class AAT(BaseModel):
    version: Optional[str] = None
    app_pub_key: Optional[str] = Field(None, description="Application hex public key")
    client_pub_key: Optional[str] = Field(
        None, description="Application hex public key associated with a client"
    )
    signature: Optional[str] = Field(None, description="Application's signature in hex")


class RelayHeader(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RelayMetadata(BaseModel):
    block_height: Optional[int] = None


class RelayPayload(BaseModel):
    data: Optional[str] = Field(
        None, description="The actual data of the request string for the external chain"
    )
    method: Optional[str] = Field(None, description="The HTTP CRUD method")
    path: Optional[str] = Field(None, description="The REST path")
    headers: Optional[RelayHeader] = None


class SessionHeader(BaseModel):
    app_public_key: Optional[str] = Field(
        None, description="Application hex public key associated with a client"
    )
    chain: Optional[str] = Field(None, description="Network Identified in hex")
    session_height: Optional[int] = Field(None, description="Height of the session")


class SimpleProof(BaseModel):
    total: Optional[int] = None
    index: Optional[int] = None
    leaf_hash: Optional[str] = None
    aunts: Optional[List[str]] = None


class StoredReceipt(BaseModel):
    session_header: Optional[SessionHeader] = None
    servicer_address: Optional[str] = None
    total_relays: Optional[int] = None
    evidence_type: Optional[int] = None


class SigningInfo(BaseModel):
    address: Optional[str] = Field(
        None, description="operator address of the signing info"
    )
    index_offset: Optional[int] = Field(
        None,
        description="The counter for the signing info (reset to 0 after SignedBlocksWindow elapses)",
    )
    jailed_blocks_counter: Optional[int] = Field(
        None, description="The number of blocks jailed (reset to 0 after unjail)"
    )
    jailed_until: Optional[str] = Field(
        None, description="The time the node can be unjailed"
    )
    missed_blocks_counter: Optional[int] = Field(
        None,
        description="The number of blocks missed within SignedBlocksWindow (can be decremented after the fact if new signature information/evidence is found)",
    )
    start_height: Optional[int] = Field(
        None,
        description="The origin height of the node (when it first joined the network)",
    )


class HashSum(BaseModel):
    hash_: Optional[str] = Field(None, alias="hash", description="byte array")
    sum_: Optional[int] = Field(None, alias="sum", description="uint64")


class Signature(BaseModel):
    pub_key: Optional[str] = None
    signature: Optional[str] = None


class StdTx(BaseModel):
    entropy: Optional[int] = None
    fee: Optional[Coin] = None
    memo: Optional[str] = None
    msg: Optional[Dict[str, Any]] = None
    signature: Optional[Signature] = None


class TxResult(BaseModel):
    code: Optional[int] = None
    data: Optional[str] = None
    log: Optional[str] = None
    info: Optional[str] = None
    events: Optional[List[str]] = None
    codespace: Optional[str] = None
    signer: Optional[str] = None
    recipient: Optional[str] = Field(
        None, description="The receiver of the transaction, will be null if no receiver"
    )
    message_type: Optional[str] = Field(
        None,
        description='The type of the transaction, can be "app_stake", "app_begin_unstake", "stake_validator", "begin_unstake_validator", "unjail_validator", "send", "upgrade", "change_param", "dao_tranfer", "claim", or "proof"',
    )


class TXProof(BaseModel):
    root_hash: Optional[str] = None
    data: Optional[str] = None
    proof: Optional[SimpleProof] = None


class QueryAddressHeight(BaseModel):
    height: Optional[int] = None
    address: Optional[str] = None


class QueryBalanceResponse(BaseModel):
    balance: Optional[int] = None


class QueryBlock(BaseModel):
    height: Optional[int] = None


class QueryDispatchRequest(BaseModel):
    __root__: SessionHeader


class Session(BaseModel):
    header: Optional[SessionHeader] = None
    key: Optional[str] = None
    nodes: Optional[List[Node]] = None


class QueryHeightAndKey(BaseModel):
    height: Optional[int] = None
    key: Optional[str] = None


class QueryHeight(BaseModel):
    height: Optional[int] = None


class QueryHeightResponse(BaseModel):
    height: Optional[int] = None


class QueryNodeReceipt(BaseModel):
    address: Optional[str] = Field(None, description="Node address")
    blockchain: Optional[str] = None
    app_pubkey: Optional[str] = Field(
        None, description="Application hex public key associated with a client"
    )
    session_block_height: Optional[int] = Field(
        None, description="Session block height"
    )
    height: Optional[int] = Field(None, description="Height of the session")


class QueryNodeReceiptsResponse(BaseModel):
    result: Optional[List[StoredReceipt]] = None
    page: Optional[int] = Field(None, description="current page")
    total_pages: Optional[int] = Field(None, description="maximum amount of pages")


class QuerySigningInfoResponse(BaseModel):
    result: Optional[List[SigningInfo]] = None
    page: Optional[int] = Field(None, description="current page")
    total_pages: Optional[int] = Field(None, description="maximum amount of pages")


class QueryNodesResponse(BaseModel):
    result: Optional[List[Node]] = None
    page: Optional[int] = Field(None, description="current page")
    total_pages: Optional[int] = Field(None, description="maximum amount of pages")


class QueryAppsResponse(BaseModel):
    result: Optional[List[Application]] = None
    page: Optional[int] = Field(None, description="current page")
    total_pages: Optional[int] = Field(None, description="maximum amount of pages")


class QueryRawTXRequest(BaseModel):
    address: Optional[str] = None
    raw_hex_bytes: Optional[str] = None


class QueryRawTXResponse(BaseModel):
    height: Optional[int] = Field(None, description="Blockheight of the transaction")
    txhash: Optional[str] = Field(None, description="Hash of the transaction")
    codespace: Optional[str] = None
    code: Optional[int] = Field(
        None, description="Result code returned (0 is OK; everything else is error)"
    )
    data: Optional[str] = Field(None, description="Raw transaction data")
    raw_log: Optional[str] = Field(None, description="Raw transaction log")
    logs: Optional[List[ABCIMessageLog]] = Field(
        None, description="ABCI Tendermint Logs"
    )
    info: Optional[str] = None
    gas_wanted: Optional[int] = None
    gas_used: Optional[int] = None
    Tx: Optional[Dict[str, Any]] = None
    timestamp: Optional[str] = Field(None, description="Timestamp of the transaction")


class QueryRelayResponse(BaseModel):
    signature: Optional[str] = Field(None, description="Signature from the node in hex")
    payload: Optional[str] = Field(None, description="string response to relay")


class QueryChallengeRequest(BaseModel):
    majority_responses: Optional[List[QueryRelayResponse]] = Field(
        None, max_items=2, min_items=1
    )
    minority_response: Optional[QueryRelayResponse] = None
    address: Optional[str] = Field(None, description="reporter address")


class QueryChallengeResponse(BaseModel):
    response: Optional[str] = None


class StakingStatus(Enum):
    field_1____unstaking = "1 // unstaking"
    field_2____staked = "2 // staked"


class JailedStatus(Enum):
    field_1____jailed = "1 // jailed"
    field_2____unjailed = "2 // unjailed"


class QueryHeightAndValidatorsOpts(BaseModel):
    height: Optional[int] = None
    page: Optional[int] = None
    per_page: Optional[int] = None
    staking_status: Optional[StakingStatus] = None
    jailed_status: Optional[JailedStatus] = None
    blockchain: Optional[str] = None


class StakingStatus1(Enum):
    field_1____unstaking = "1 // unstaking"
    field_2____staked = "2 // staked"


class QueryHeightAndApplicationsOpts(BaseModel):
    height: Optional[int] = None
    page: Optional[int] = None
    per_page: Optional[int] = None
    staking_status: Optional[StakingStatus1] = None
    blockchain: Optional[str] = None


class QuerySupplyResponse(BaseModel):
    node_staked: Optional[int] = Field(
        None, description="Amount staked by the node in uPOKT"
    )
    app_staked: Optional[int] = Field(
        None, description="Amount staked by the app in uPOKT"
    )
    dao: Optional[int] = Field(None, description="DAO amount in uPOKT")
    total_staked: Optional[int] = Field(
        None, description="Total amount staked in uPOKT"
    )
    total_unstaked: Optional[int] = Field(
        None, description="Total amount unstaked in uPOKT"
    )
    total: Optional[int] = Field(None, description="Total amount in uPOKT")


class QuerySupportedChainsResponse(BaseModel):
    supported_chains: Optional[List[str]] = Field(
        None, description="Supported blockchains"
    )


class QueryTX(BaseModel):
    hash_: Optional[str] = Field(None, alias="hash")
    prove: Optional[bool] = None


class QueryPaginatedHeightAndAddrParams(BaseModel):
    height: Optional[int] = None
    address: Optional[str] = None
    page: Optional[int] = None
    per_page: Optional[int] = None


class QueryAccountTXs(BaseModel):
    address: str
    page: Optional[int] = None
    per_page: Optional[int] = None
    prove: Optional[bool] = None
    received: Optional[bool] = None
    order: Optional[str] = None


class QueryBlockTXs(BaseModel):
    height: int
    page: Optional[int] = None
    per_page: Optional[int] = None
    prove: Optional[bool] = None
    order: Optional[str] = None


class UpgradeResponse(BaseModel):
    Height: Optional[str] = None
    Version: Optional[str] = None


class Account(BaseModel):
    address: Optional[str] = None
    coins: Optional[List[Coin]] = None
    public_key: Optional[str] = None


class BlockID(BaseModel):
    hash_: Optional[str] = Field(None, alias="hash")
    parts: Optional[PartSetHeader] = None


class CommitSignature(BaseModel):
    type_: Optional[str] = Field(None, alias="type")
    height: Optional[int] = None
    round_: Optional[int] = Field(None, alias="round")
    block_id: Optional[BlockID] = None
    timestamp: Optional[str] = None
    validator_address: Optional[str] = None
    validator_index: Optional[int] = None
    signature: Optional[str] = None


class AllParams(BaseModel):
    app_params: Optional[List[SingleParam]] = None
    node_params: Optional[List[SingleParam]] = None
    pocket_params: Optional[List[SingleParam]] = None
    gov_params: Optional[List[SingleParam]] = None
    auth_params: Optional[List[SingleParam]] = None


class RelayProof(BaseModel):
    request_hash: Optional[str] = Field(None, description="request hash identifier")
    entropy: Optional[int] = Field(None, description="Entropy value to add uniqueness")
    session_block_height: Optional[int] = Field(
        None, description="Height of the session"
    )
    servicer_pub_key: Optional[str] = Field(
        None, description="Servicer public hex public key"
    )
    blockchain: Optional[str] = Field(None, description="Blockchain hex string")
    aat: Optional[AAT] = None
    signature: Optional[str] = Field(None, description="client's signature in hex")


class MsgClaim(BaseModel):
    expiration_height: Optional[int] = Field(
        None, description="height when the claim expires"
    )
    evidence_type: Optional[int] = Field(None, description="Arbitrary Enum")
    from_address: Optional[str] = None
    total_proofs: Optional[int] = None
    session_header: Optional[SessionHeader] = None
    merkle_root: Optional[HashSum] = None


class Transaction(BaseModel):
    hash_: Optional[str] = Field(
        None, alias="hash", description="Hash of the transaction"
    )
    height: Optional[int] = Field(None, description="Blockheight of the transaction")
    index: Optional[int] = None
    tx_result: Optional[TxResult] = None
    tx: Optional[str] = Field(None, description="Raw data of the transaction")
    proof: Optional[TXProof] = None
    stdTx: Optional[StdTx] = None


class QueryDispatchResponse(BaseModel):
    session: Optional[Session] = None
    block_height: Optional[int] = None


class QueryNodeClaimsResponse(BaseModel):
    result: Optional[List[MsgClaim]] = None
    page: Optional[int] = Field(None, description="current page")
    total_pages: Optional[int] = Field(None, description="maximum amount of pages")


class QueryRelayRequest(BaseModel):
    payload: Optional[RelayPayload] = None
    meta: Optional[RelayMetadata] = None
    proof: Optional[RelayProof] = None


class QuerySimRequest(BaseModel):
    payload: Optional[RelayPayload] = None
    relay_network_id: Optional[str] = None
    meta: Optional[RelayMetadata] = None
    proof: Optional[RelayProof] = None


class QueryErrorRelayResponse(BaseModel):
    error: Optional[str] = Field(None, description="Amino JSON Error String")
    dispatch: Optional[QueryDispatchResponse] = None


class QueryTXResponse(BaseModel):
    transaction: Optional[Transaction] = None


class QueryAccountTXsResponse(BaseModel):
    txs: Optional[List[Transaction]] = None
    total_count: Optional[str] = None


class QueryBlockTXsResponse(BaseModel):
    txs: Optional[List[Transaction]] = None
    total_count: Optional[int] = None


class BlockHeader(BaseModel):
    version: Optional[Consensus] = None
    chain_id: Optional[str] = None
    height: Optional[int] = None
    time: Optional[str] = None
    num_txs: Optional[int] = None
    total_txs: Optional[int] = None
    last_block_id: Optional[BlockID] = None
    last_commit_hash: Optional[str] = None
    data_hash: Optional[str] = None
    validators_hash: Optional[str] = None
    next_validators_hash: Optional[str] = None
    consensus_hash: Optional[str] = None
    app_hash: Optional[str] = None
    last_results_hash: Optional[str] = None
    evidence_hash: Optional[str] = None
    proposer_address: Optional[str] = None


class BlockMeta(BaseModel):
    block_id: Optional[BlockID] = None
    blockHeader: Optional[BlockHeader] = None


class Commit(BaseModel):
    block_id: Optional[BlockID] = None
    commit_signature: Optional[CommitSignature] = None


class Block(BaseModel):
    header: Optional[BlockHeader] = None
    data: Optional[str] = Field(None, description="Data hash of the block")
    evidence: Optional[str] = Field(None, description="Evidence hash")
    lastCommit: Optional[Commit] = None


class QueryBlockResponse(BaseModel):
    block: Optional[Block] = None
    block_meta: Optional[BlockMeta] = None
